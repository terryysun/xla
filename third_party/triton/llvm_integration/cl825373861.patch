
--- a/lib/Analysis/Allocation.cpp	2025-10-15 10:11:13.000000000 -0700
+++ b/lib/Analysis/Allocation.cpp	2025-10-28 22:48:41.000000000 -0700
@@ -16,6 +16,8 @@
 #include "llvm/Support/Debug.h"
 #include "llvm/Support/raw_ostream.h"
 
+#undef LDBG
+
 #define DEBUG_TYPE "allocation-shared-memory"
 #define DBGS() (llvm::dbgs() << "[" DEBUG_TYPE "]: ")
 #define LDBG(X) LLVM_DEBUG(DBGS() << X << "\n")

--- a/lib/Analysis/AxisInfo.cpp	2025-10-15 10:11:13.000000000 -0700
+++ b/lib/Analysis/AxisInfo.cpp	2025-10-28 22:48:41.000000000 -0700
@@ -9,6 +9,8 @@
 
 #include <numeric>
 
+#undef LDBG
+
 #define DEBUG_TYPE "axis-info"
 #define DBGS() (llvm::dbgs() << "[" DEBUG_TYPE "]: ")
 #define LDBG(X) LLVM_DEBUG(DBGS() << X << "\n")

--- a/lib/Dialect/TritonGPU/IR/Ops.cpp	2025-10-15 10:11:13.000000000 -0700
+++ b/lib/Dialect/TritonGPU/IR/Ops.cpp	2025-10-28 22:48:42.000000000 -0700
@@ -903,8 +903,9 @@
     return;
   }
   // And the default region branches transparently back to the parent.
-  assert(src.getRegionOrNull() == &getDefaultRegion());
-  successors.push_back(RegionSuccessor(getResults()));
+  assert(src.getTerminatorPredecessorOrNull()->getParentRegion() ==
+         &getDefaultRegion());
+  successors.push_back(RegionSuccessor(getOperation(), getResults()));
 }
 
 LogicalResult WarpSpecializeOp::verify() {

--- a/lib/Dialect/TritonGPU/Transforms/Utility.cpp	2025-10-15 10:11:13.000000000 -0700
+++ b/lib/Dialect/TritonGPU/Transforms/Utility.cpp	2025-10-28 22:48:42.000000000 -0700
@@ -15,6 +15,8 @@
 #include "triton/Dialect/TritonNvidiaGPU/IR/Dialect.h"
 #include "llvm/Support/Debug.h"
 
+#undef LDBG
+
 #define DEBUG_TYPE "ttg-utility"
 #define DBGS() (llvm::dbgs() << "[" DEBUG_TYPE "]: ")
 #define LDBG(X) LLVM_DEBUG(DBGS() << X << "\n")

--- a/lib/Dialect/TritonNvidiaGPU/Transforms/Utility.cpp	2025-07-31 00:13:23.000000000 -0700
+++ b/lib/Dialect/TritonNvidiaGPU/Transforms/Utility.cpp	2025-10-28 22:48:42.000000000 -0700
@@ -1,5 +1,7 @@
 #include "triton/Dialect/TritonNvidiaGPU/Transforms/Utility.h"
 
+#undef LDBG
+
 #define DEBUG_TYPE "ttng-utility"
 #define DBGS() (llvm::dbgs() << "[" DEBUG_TYPE "]: ")
 #define LDBG(X) LLVM_DEBUG(DBGS() << X << "\n")

--- a/third_party/amd/include/Analysis/RangeAnalysis.h	2025-04-30 09:57:08.000000000 -0700
+++ b/third_party/amd/include/Analysis/RangeAnalysis.h	2025-10-29 06:16:49.000000000 -0700
@@ -78,7 +78,7 @@
   /// the loop operands and all users and all users of the results of the loop.
   void visitRegionSuccessors(
       ProgramPoint *point, RegionBranchOpInterface branch,
-      RegionBranchPoint successor,
+      RegionSuccessor successor,
       ArrayRef<dataflow::AbstractSparseLattice *> abstractLattices) override;
 
   /// Collect all operands that participate in assumptions (see description of

--- a/third_party/amd/lib/Analysis/RangeAnalysis.cpp	2025-10-15 10:11:13.000000000 -0700
+++ b/third_party/amd/lib/Analysis/RangeAnalysis.cpp	2025-10-29 06:16:50.000000000 -0700
@@ -471,7 +471,7 @@
 
 void TritonIntegerRangeAnalysis::visitRegionSuccessors(
     ProgramPoint *point, RegionBranchOpInterface branch,
-    RegionBranchPoint successor,
+    RegionSuccessor successor,
     ArrayRef<dataflow::AbstractSparseLattice *> abstractLattices) {
   LLVM_DEBUG({
     DBGS() << "Inferring ranges for ";
@@ -535,10 +535,11 @@
         if (!inputs.empty()) {
           firstIndex = cast<OpResult>(inputs.front()).getResultNumber();
         }
-        visitNonControlFlowArguments(branch,
-                                     RegionSuccessor(branch->getResults().slice(
-                                         firstIndex, inputs.size())),
-                                     lattices, firstIndex);
+        visitNonControlFlowArguments(
+            branch,
+            RegionSuccessor(
+                branch, branch->getResults().slice(firstIndex, inputs.size())),
+            lattices, firstIndex);
       } else {
         if (!inputs.empty()) {
           firstIndex = cast<BlockArgument>(inputs.front()).getArgNumber();
